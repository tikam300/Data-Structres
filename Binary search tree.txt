// Binary Search Tree in C++

#include <iostream>
#include <algorithm>
using namespace std;
 
// creating a node
typedef struct BstNode{
    int data;
    struct BstNode* left;
    struct BstNode* right;
}BstNode;

BstNode* GetNewNode(int data){
    BstNode* newNode = new BstNode();
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// inserting a node
BstNode* insert(BstNode* root,int data){
    if(root==NULL){
        root = GetNewNode(data);
    }
    else if(data<=root->data){
        root->left = insert(root->left,data);
    }else{
        root->right = insert(root->right,data);
    }
    return root;
}
/*void LevelOrder(BstNode* root){
     if(root==NULL)return;
     queue<BstNode*> Q;
     Q.push(root);
     while(!Q.empty()){
         BstNode* current = Q.front();
         Q.pop();
         cout<<current->data<<" ";
         if(current->left!=NULL)Q.push(current->left);
         if(current->right!=NULL)Q.push(current->right);
     }
}*/
bool search(BstNode* root,int data){
    if(root==NULL){
        return false;
    }
    else if(root->data==data){
        return true;
    }
    else if(data<=root->data){
        return search(root->left,data);
    }else{
        return search(root->right,data);
    }
}
int FindMin(BstNode* root){
    if(root==NULL){
        cout<<"Error : Tree is empty\n";
        return -1;
    }
    else if(root->left==NULL){
        return root->data;
    }
    return FindMin(root->left);
}

// find max in root
int FindMax(BstNode* root){
    if(root==NULL){
        cout<<"Error : Tree is empty\n";
        return -1;
    }
    else if(root->right==NULL){
        return root->data;
    }
    return FindMax(root->right);
}
int FindHeight(BstNode* root){
    if(root==NULL){
        return -1;
    }
    
    int leftheight =  FindHeight(root->left);
    int rightheight = FindHeight(root->right);
    return max(leftheight,rightheight)+1;
}
/*void Preorder(BstNode* root){
    if(root==NULL)return;
    cout<<root->data<<" ";
    Preorder(root->left);
    Preorder(root->right);
}
void Inorder(BstNode* root){
    if(root==NULL)return;
    Inorder(root->left);
    cout<<root->data<<" ";
    Inorder(root->right);
}
void Postorder(BstNode* root){
    if(root==NULL)return;
    Postorder(root->left);
    Postorder(root->right);
    cout<<root->data<<" ";
}*/
/*bool IsSubtreeLesser(BstNode* root,int value){
    if(root==NULL)return true;
    if(root->data <= value && IsSubtreeLesser(root->left,value) && IsSubtreeLesser(root->right,value))
         return true;
    else
        return false;
}
bool IsSubtreeGreater(BstNode* root,int value){
    if(root==NULL)return true;
    if(root->data > value && IsSubtreeGreater(root->left,value) && IsSubtreeGreater(root->right,value))
         return true;
    else
        return false;  
}
bool isBinarySearchTree(BstNode* root){
    if(root==NULL)return true;
    if(IsSubtreeLesser(root->left,root->data) && IsSubtreeGreater(root->right,root->data) && isBinarySearchTree(root->left)&& isBinarySearchTree(root->right)){
        return true;
    }else 
        return false;
}*/
// delete node from  BST
BstNode* FindMin(BstNode* root){
    while(root->left!=NULL)root = root->left;
    return root;
}
BstNode* Delete(BstNode* root,int data){
    if(root==NULL) return root;
    else if(data < root->data)root->left = Delete(root->left,data);
    else if(data>root->data) root->right = Delete(root->right,data);
    else{
        // case 1: No child
        if(root->left == NULL && root->right==NULL ){
            delete root;
            root = NULL;
        }
        // case 2 one child
        else if(root->left == NULL){
            BstNode* temp = root;
            root = root->right;
            delete temp;
        }
        else if(root->right == NULL){
            BstNode* temp = root;
            root = root->left;
            delete temp;
        }
        
        // case 3 2 child
        else {
             BstNode* temp = FindMin(root->right);
             root->data = temp->data;
             root->right = Delete(root->right,temp->data);
             
        }
    
    }
    return root;
} 


int main()
{
   BstNode* root = NULL;
   root = insert(root,15);
   root = insert(root,10);
   root = insert(root,20);
   root = insert(root,25);
   root = insert(root,8);
   root = insert(root,12);
  /* int number;
   cout<<"Enter number be searched"<<endl;
   cin>>number;
   if(search(root,number)==true)cout<<"found\n";
   else cout<<"not found\n";
   cout<<FindMin(root)<<endl;
   cout<<FindMax(root);*/
   //cout<<FindHeight(root);
   

    return 0;
}